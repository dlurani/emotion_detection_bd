{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[{"file_id":"1fKx9J-9GSHzVh3Rnf6kXIIxRjmN7tBP7","timestamp":1741828219172},{"file_id":"1L2iQ4sDeRPSC7w09J371YaIQzyzu24iE","timestamp":1741627524906}]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","metadata":{"id":"XyFvmQ32nkiZ"},"source":["# **Creazione di modelli per la classificazione di emozioni da file audio .wav**\n","\n","**Corso**: Big Data\n","\n","**Professore**: Diego Angelo Gaetano Reforgiato Recupero\n","\n","**Studenti**: Daniele Lurani, Lorenzo Susino\n"]},{"cell_type":"markdown","metadata":{"id":"xRDYDDlfYhin"},"source":["## **Importazioni e configurazioni iniziali**\n","In questa sezione vengono importate le librerie necessarie per il progetto (ad esempio, `pandas`, `numpy`, `matplotlib`, ecc.) e configurati eventuali parametri di visualizzazione o impostazioni iniziali per il notebook.\n"]},{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":93892,"status":"ok","timestamp":1741880817121,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"},"user_tz":-60},"id":"qpcBI3vBVHdZ","outputId":"c5d8ecd1-0099-4b7f-8a5b-fe863a652ed5"},"outputs":[{"output_type":"stream","name":"stdout","text":["--2025-03-13 15:46:08--  https://downloads.apache.org/spark/spark-3.5.5/spark-3.5.5-bin-hadoop3.tgz\n","Resolving downloads.apache.org (downloads.apache.org)... 88.99.208.237, 135.181.214.104, 2a01:4f8:10a:39da::2, ...\n","Connecting to downloads.apache.org (downloads.apache.org)|88.99.208.237|:443... connected.\n","HTTP request sent, awaiting response... 200 OK\n","Length: 400724056 (382M) [application/x-gzip]\n","Saving to: ‘spark-3.5.5-bin-hadoop3.tgz’\n","\n","spark-3.5.5-bin-had 100%[===================>] 382.16M  13.2MB/s    in 30s     \n","\n","2025-03-13 15:46:38 (12.8 MB/s) - ‘spark-3.5.5-bin-hadoop3.tgz’ saved [400724056/400724056]\n","\n","<module 'pyspark.version' from '/content/spark-3.5.5-bin-hadoop3/python/pyspark/version.py'>\n"]}],"source":["!apt-get install openjdk-8-jdk-headless -qq > /dev/null\n","!wget https://downloads.apache.org/spark/spark-3.5.5/spark-3.5.5-bin-hadoop3.tgz\n","!tar xf spark-3.5.5-bin-hadoop3.tgz\n","!pip install -q findspark\n","import os\n","os.environ[\"JAVA_HOME\"] = \"/usr/lib/jvm/java-8-openjdk-amd64\"\n","os.environ[\"SPARK_HOME\"] = \"/content/spark-3.5.5-bin-hadoop3\"\n","import findspark\n","findspark.init()\n","import pyspark\n","print(pyspark.version)\n","from pyspark.sql import SparkSession\n","spark = SparkSession.builder.master(\"local[*]\").getOrCreate()\n","sc=spark.sparkContext"]},{"cell_type":"code","execution_count":2,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":32691,"status":"ok","timestamp":1741880849816,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"},"user_tz":-60},"id":"44qenKp_4a_l","outputId":"3a5f1af2-88ac-439f-b1e7-29d86791267f"},"outputs":[{"output_type":"stream","name":"stdout","text":["Requirement already satisfied: numpy in /usr/local/lib/python3.11/dist-packages (1.26.4)\n","Requirement already satisfied: pandas in /usr/local/lib/python3.11/dist-packages (2.2.2)\n","Requirement already satisfied: numpy>=1.23.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (1.26.4)\n","Requirement already satisfied: python-dateutil>=2.8.2 in /usr/local/lib/python3.11/dist-packages (from pandas) (2.8.2)\n","Requirement already satisfied: pytz>=2020.1 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n","Requirement already satisfied: tzdata>=2022.7 in /usr/local/lib/python3.11/dist-packages (from pandas) (2025.1)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.8.2->pandas) (1.17.0)\n","Requirement already satisfied: matplotlib in /usr/local/lib/python3.11/dist-packages (3.10.0)\n","Requirement already satisfied: contourpy>=1.0.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.3.1)\n","Requirement already satisfied: cycler>=0.10 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (0.12.1)\n","Requirement already satisfied: fonttools>=4.22.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (4.56.0)\n","Requirement already satisfied: kiwisolver>=1.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.4.8)\n","Requirement already satisfied: numpy>=1.23 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (1.26.4)\n","Requirement already satisfied: packaging>=20.0 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (24.2)\n","Requirement already satisfied: pillow>=8 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (11.1.0)\n","Requirement already satisfied: pyparsing>=2.3.1 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (3.2.1)\n","Requirement already satisfied: python-dateutil>=2.7 in /usr/local/lib/python3.11/dist-packages (from matplotlib) (2.8.2)\n","Requirement already satisfied: six>=1.5 in /usr/local/lib/python3.11/dist-packages (from python-dateutil>=2.7->matplotlib) (1.17.0)\n","Requirement already satisfied: scikit-learn in /usr/local/lib/python3.11/dist-packages (1.6.1)\n","Requirement already satisfied: numpy>=1.19.5 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.26.4)\n","Requirement already satisfied: scipy>=1.6.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.14.1)\n","Requirement already satisfied: joblib>=1.2.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (1.4.2)\n","Requirement already satisfied: threadpoolctl>=3.1.0 in /usr/local/lib/python3.11/dist-packages (from scikit-learn) (3.5.0)\n","Collecting SpeechRecognition\n","  Downloading SpeechRecognition-3.14.1-py3-none-any.whl.metadata (31 kB)\n","Requirement already satisfied: typing-extensions in /usr/local/lib/python3.11/dist-packages (from SpeechRecognition) (4.12.2)\n","Downloading SpeechRecognition-3.14.1-py3-none-any.whl (32.9 MB)\n","\u001b[2K   \u001b[90m━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━\u001b[0m \u001b[32m32.9/32.9 MB\u001b[0m \u001b[31m46.2 MB/s\u001b[0m eta \u001b[36m0:00:00\u001b[0m\n","\u001b[?25hInstalling collected packages: SpeechRecognition\n","Successfully installed SpeechRecognition-3.14.1\n"]}],"source":["!pip install numpy\n","!pip install pandas\n","!pip install matplotlib\n","!pip install scikit-learn\n","!pip install SpeechRecognition"]},{"cell_type":"code","execution_count":3,"metadata":{"collapsed":true,"executionInfo":{"elapsed":3436,"status":"ok","timestamp":1741880853254,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"},"user_tz":-60},"id":"Cl22OMGS4bij"},"outputs":[],"source":["import numpy as np\n","import matplotlib\n","import sklearn\n","import numpy as np\n","import speech_recognition as sr\n","import joblib\n","import matplotlib.pyplot as plt\n","from sklearn.feature_extraction.text import TfidfVectorizer\n","from sklearn.pipeline import Pipeline\n","from sklearn.ensemble import RandomForestClassifier, GradientBoostingClassifier\n","from sklearn.model_selection import train_test_split\n","from sklearn.metrics import accuracy_score, precision_score, log_loss, f1_score, roc_auc_score"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"collapsed":true,"executionInfo":{"elapsed":43279,"status":"ok","timestamp":1741880896545,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"},"user_tz":-60},"id":"s_4Ntr0gAHva","outputId":"a794639b-be33-44a3-e8b7-77597c41cf75"},"outputs":[{"output_type":"stream","name":"stdout","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')\n","\n","base_path = '/content/drive/My Drive/BigData_Project/dataset'\n","english_path = base_path + '/english'\n","german_path = base_path + '/german'\n","french_path = base_path + '/french'"]},{"cell_type":"markdown","metadata":{"id":"E9H4jeV5ntCO"},"source":["## **Funzioni di estrazione features**\n","\n","Questa sezione si occupa di definire le funzioni che verranno utilizzate per la lettura dei file e per l'estrazione delle features."]},{"cell_type":"code","execution_count":5,"metadata":{"executionInfo":{"elapsed":7,"status":"ok","timestamp":1741880896562,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"},"user_tz":-60},"id":"rkLAaj0eQpfo"},"outputs":[],"source":["# Funzione per estrarre testo dall'audio\n","def extract_text_from_audio(audio_file_path):\n","    # Inizializza recognizer\n","    recognizer = sr.Recognizer()\n","\n","    try:\n","        # Carica il file audio\n","        audio_file = sr.AudioFile(audio_file_path)\n","\n","        with audio_file as source:\n","            # Registra l'audio\n","            audio_data = recognizer.record(source)\n","\n","            # UtilizGza oogle Speech Recognition\n","            text = recognizer.recognize_google(audio_data, language=\"en-US\")\n","            return text\n","    except Exception as e:\n","        print(f\"Errore nell'estrazione del testo da {audio_file_path}: {e}\")\n","        return \"\"\n","\n","# Funzione ricorsiva per trovare tutti i file .wav e ottenere l'emozione dalla cartella\n","def find_audio_files_recursive(root_folder):\n","    texts = []\n","    labels = []\n","    file_paths = []\n","\n","    for dirpath, dirnames, filenames in os.walk(root_folder):\n","        # Ottieni l'emozione dal nome dell'ultima cartella nel percorso\n","        emotion = os.path.basename(dirpath)\n","\n","        for filename in filenames:\n","            if filename.endswith('.wav'):\n","                file_path = os.path.join(dirpath, filename)\n","\n","                # Estrai testo dall'audio\n","                text = extract_text_from_audio(file_path)\n","\n","                if text:  # Solo se il testo è stato estratto con successo\n","                    texts.append(text)\n","                    labels.append(emotion)\n","                    file_paths.append(file_path)\n","\n","    return texts, labels, file_paths\n","\n","\n"]},{"cell_type":"markdown","metadata":{"id":"JkVWPI-uuw9F"},"source":["## **Lavoro su Dataset Francese**\n","\n","In questa sezione viene effettuata l'analisi delle emozioni di un dataset in lingua francese basandosi su feature testuali e su modelli supervisionati"]},{"cell_type":"markdown","metadata":{"id":"5yFXfER7vG23"},"source":["Estrazione features e settaggio dei DataFrame"]},{"cell_type":"markdown","metadata":{"id":"i0-Xzo5EvG23"},"source":["Preprocessing del dataset:\n","- Creazione della pipeline\n","- Split del dataset in train e test sets\n"]},{"cell_type":"code","source":["# Creazione del modello pipeline\n","def create_model(model_type):\n","    if model_type == 'rf':\n","      pipeline = Pipeline([\n","          ('vectorizer', TfidfVectorizer(max_features=1000)),\n","          ('classifier', RandomForestClassifier())\n","      ])\n","    else :\n","      pipeline = Pipeline([\n","          ('vectorizer', TfidfVectorizer(max_features=1000)),\n","          ('classifier', GradientBoostingClassifier())\n","      ])\n","\n","    return pipeline\n","\n","# Funzione per predire l'emozione di un nuovo file audio\n","def predict_emotion(model, audio_file_path):\n","    text = extract_text_from_audio(audio_file_path)\n","    if not text:\n","        return \"Impossibile estrarre testo dall'audio\"\n","\n","    prediction = model.predict([text])[0]\n","    return prediction"],"metadata":{"id":"RuT1oe4Us1qy","executionInfo":{"status":"ok","timestamp":1741880896571,"user_tz":-60,"elapsed":5,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["root_folder = english_path\n","test_size = 0.2\n","\n","# Prepara il dataset\n","texts, labels, file_paths = find_audio_files_recursive(root_folder)\n","\n","# Dividi in train e test\n","X_train, X_test, y_train, y_test = train_test_split(texts, labels, test_size=test_size)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"YnSQXZ0_ouqu","outputId":"96eb7a83-f8b2-40e1-9a29-9142e3d5863d","executionInfo":{"status":"ok","timestamp":1741881677944,"user_tz":-60,"elapsed":781367,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"}}},"execution_count":7,"outputs":[{"output_type":"stream","name":"stdout","text":["Errore nell'estrazione del testo da /content/drive/My Drive/BigData_Project/dataset/english/fear/03-01-06-02-01-01-06.wav: \n","Errore nell'estrazione del testo da /content/drive/My Drive/BigData_Project/dataset/english/fear/03-01-06-02-01-02-06.wav: \n","Errore nell'estrazione del testo da /content/drive/My Drive/BigData_Project/dataset/english/fear/03-01-06-02-02-01-20.wav: \n","Errore nell'estrazione del testo da /content/drive/My Drive/BigData_Project/dataset/english/fear/03-01-06-02-02-02-20.wav: \n","Errore nell'estrazione del testo da /content/drive/My Drive/BigData_Project/dataset/english/sadness/03-01-04-02-02-01-06.wav: \n","Errore nell'estrazione del testo da /content/drive/My Drive/BigData_Project/dataset/english/sadness/03-01-04-02-01-02-09.wav: \n"]}]},{"cell_type":"markdown","metadata":{"id":"W6JkvhD6vG23"},"source":["### Random Forest e Gradient Boosting\n","\n","Creazione e addestramento del modelli RandomForest e GradientBoosting"]},{"cell_type":"code","source":["model_rf = create_model(\"rf\")\n","model_rf.fit(X_train, y_train)\n","\n","y_pred = model_rf.predict(X_test)\n","eng_rf_proba = model_rf.predict_proba(X_test)\n","\n","accuracy_rf = accuracy_score(y_test, y_pred)\n","precision_rf = precision_score(y_test, y_pred, average='weighted', zero_division=0)\n","f1_rf = f1_score(y_test, y_pred, average='weighted')\n","auc_rf = roc_auc_score(y_test, eng_rf_proba, multi_class='ovr')\n","\n","print(\"\\nMetriche del Random Forest\")\n","print(f\"Accuratezza: {accuracy_rf:.4f}\")\n","print(f\"Precision: {precision_rf:.4f}\")\n","print(f\"F1-Score: {f1_rf:.4f}\")\n","print(f\"AUC-ROC: {auc_rf:.4f}\")"],"metadata":{"id":"JyeBoMOnso5o","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741882612349,"user_tz":-60,"elapsed":347,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"}},"outputId":"96e8993e-c516-4664-c2b0-733656d10389"},"execution_count":26,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Metriche del Random Forest\n","Accuratezza: 0.1857\n","Precision: 0.2594\n","F1-Score: 0.0978\n","AUC-ROC: 0.5187\n"]}]},{"cell_type":"code","source":["model_gb = create_model(\"gb\")\n","model_gb.fit(X_train, y_train)\n","\n","y_pred = model_gb.predict(X_test)\n","eng_gb_proba = model_gb.predict_proba(X_test)\n","\n","accuracy_gb = accuracy_score(y_test, y_pred)\n","precision_gb = precision_score(y_test, y_pred, average='weighted', zero_division=0)\n","f1_gb = f1_score(y_test, y_pred, average='weighted')\n","auc_gb = roc_auc_score(y_test, eng_gb_proba, multi_class='ovr')\n","\n","print(\"\\nMetriche del Gradient Boosting\")\n","print(f\"Accuracy: {accuracy_gb:.4f}\")\n","print(f\"Precision: {precision_gb:.4f}\")\n","print(f\"F1-Score: {f1_gb:.4f}\")\n","print(f\"AUC-ROC: {auc_gb:.4f}\")"],"metadata":{"id":"oqFmahO3BO86","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1741882614344,"user_tz":-60,"elapsed":1321,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"}},"outputId":"7011367a-1342-4b33-acb4-4b73782cbab4"},"execution_count":27,"outputs":[{"output_type":"stream","name":"stdout","text":["\n","Metriche del Gradient Boosting\n","Accuracy: 0.1857\n","Precision: 0.0794\n","F1-Score: 0.0650\n","AUC-ROC: 0.5191\n"]}]},{"cell_type":"markdown","metadata":{"id":"dJAht7l_vG24"},"source":["Confronto dei risultati ottenuti"]},{"cell_type":"code","source":["# Confronto metriche Random Forest\n","X = ['Accuracy','Precision','F1-Score', 'AUC-ROC']\n","rf = [accuracy_rf, precision_rf, f1_rf, auc_rf]\n","gb = [accuracy_gb, precision_gb, f1_gb, auc_gb]\n","X_axis = np.arange(len(X))\n","\n","plt.figure(figsize=(10, 6))\n","\n","plt.bar(X_axis - 0.2, rf, 0.4, label = 'Random Forest')\n","plt.bar(X_axis + 0.2, gb, 0.4, label = 'Gradient Boosting')\n","\n","for i in range(len(X)):\n","    plt.text(X_axis[i] - 0.2, rf[i] + 0.01, f'{rf[i]:.4f}', ha='center')\n","    plt.text(X_axis[i] + 0.2, gb[i] + 0.01, f'{gb[i]:.4f}', ha='center')\n","\n","plt.xticks(X_axis, X)\n","plt.xlabel(\"Metriche\")\n","plt.ylabel(\"Valori\")\n","plt.title(\"Confronto tra metriche dei Modelli\")\n","plt.legend()\n","plt.show()"],"metadata":{"id":"gEXlQ8uW-gmS","colab":{"base_uri":"https://localhost:8080/","height":564},"executionInfo":{"status":"ok","timestamp":1741882618233,"user_tz":-60,"elapsed":432,"user":{"displayName":"Lorenzo Susino","userId":"12946734714204392344"}},"outputId":"0a6780c5-fa9e-4d69-ce4b-2ba76fb7b428"},"execution_count":28,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 1000x600 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]}]}